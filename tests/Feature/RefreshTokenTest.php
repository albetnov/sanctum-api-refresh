<?php

namespace Tests\Feature;

use App\Helpers\Tester;
use App\Helpers\Tokens;
use Database\Seeders\TokenSeeder;
use Database\Seeders\UserSeeder;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Testing\Fluent\AssertableJson;
use Tests\TestCase;

class RefreshTokenTest extends TestCase
{
    use RefreshDatabase;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->seed(UserSeeder::class);
        $this->seed(TokenSeeder::class);

        $this->disableCookieEncryption();
    }

    public function testRefreshTokenExpired()
    {
        $response = $this
            ->postJson(Tester::createApiUrlFrom('refresh'), [
                'refresh_token' => Tester::accessRefreshTokenOf(3)
            ]);

        $response->assertStatus(400)
            ->assertJson(fn(AssertableJson $json) => $json
                ->where('message', 'Refresh token is expired or invalid.')->etc());
    }

    public function testRefreshTokenSuccess()
    {
        $response = $this
            ->postJson(Tester::createApiUrlFrom('refresh'), [
                'refresh_token' => Tester::accessRefreshTokenOf(1)
            ]);

        $response->assertOk()
            ->assertJson(fn(AssertableJson $json) => $json
                ->hasAll(['token', 'expires_in', 'refresh_token', 'refresh_token_expires_in'])
                ->etc());

        // Ensure no longer work.
        self::assertFalse(Tester::accessRefreshTokenOf(1));
    }

}
